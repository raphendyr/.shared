#!/bin/sh -eu

remote=$1
url=$2

scripts=${0%/*}
z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha; do
	if [ "$local_sha" = "$z40" ]; then
		# Handle delete
		:
	else
		if [ "$remote_sha" = "$z40" ]; then
			# trye to resolve remote HEAD, i.e., top of default branch
			remote_head=$(git rev-parse --verify "$remote/HEAD" 2>/dev/null || true)
			if [ -z "$remote_head" ]; then
				for some_remote in $(git remote); do
					if [ "$some_remote" != "$remote" ]; then
						remote_head=$(git rev-parse --verify "$some_remote/HEAD" 2>/dev/null || true)
					fi
				done
			fi
			if [ "$remote_head" ]; then
				# if we have any remote/HEAD, then find merge-base
				remote_sha=$(git merge-base "$remote_head" "$local_sha" 2>/dev/null || true)
			else
				# if there is no HEAD, then one is probably removed
				remote_parent=$(\
					git log --decorate --simplify-by-decoration --oneline \
					| grep -vF "(HEAD" \
					| cut -d '(' -f 2 | cut -d ')' -f 1 \
					| tr ',' '\n' | tr -d ' ' \
					| grep "^$remote/" \
					| head -n1)
				if [ "$remote_parent" ]; then
					remote_sha=$(git rev-parse --verify "$remote_parent" 2>/dev/null || true)
				fi
			fi
		fi
		if [ -z "$remote_sha" -o "$remote_sha" = "$z40" ]; then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"

			# Verify that the remote commit has been fetched
			if ! git cat-file -e "$remote_sha^{commit}" 2>/dev/null; then
				echo "Remote has unfetched changes, run 'git fetch $remote'"
				exit 1
			fi
		fi

		# Check for WIP commit
		set -- -i --grep '^WIP'
		set -- "$@" --grep '^fixup! '
		commit=$(git rev-list -n 1 "$@" "$range")
		if [ -n "$commit" ]; then
			echo "Found WIP commit(s) in $local_ref" >&2
			git log --pretty=oneline --abbrev-commit --decorate --color "$@" "$range" | sed 's/^/  /' >&2
			case "${ALLOW_WIP:-no}" in
				y|yes|true|1)
					;;
				*)
					echo "Push rejected, set ALLOW_WIP=yes to ignore this check" >&2
					exit 1
					;;
			esac
		fi

		# Reject if there are commit warnings
		if [ "$local_sha" = "$(git rev-parse HEAD)" ] \
			&& ! "$scripts/prepare-commit-msg" "" pre-push "$range" >&2
		then
			case "${ALLOW_FIXME:-no}" in
				y|yes|true|1)
					;;
				*)
					echo "Push rejected, set ALLOW_FIXME=yes to ignore this check" >&2
					exit 1
					;;
			esac
		fi
	fi
done

exit 0
# vim: set ts=4 sw=4 tw=0 noet :
