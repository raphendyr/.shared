#!/bin/sh -eu

msg_file=$1
msg_type=${2:-}

on_error=0
commit_range=

case "$msg_type" in
	#commit|template)
	#	;;
	pre-push)
		# NOTE: a custom type used when called from pre-push hook
		commit_range=${3:-}
		on_error=1
		;;
	message|merge|squash)
		# do not add anything when doing merges or squashes
		exit 0
		;;
esac

group_grep() {
	#python -c 'import sys
	#data = {}
	#for line in sys.stdin:
	#    f, l, c = line.strip().split(":", 2)
	#    data.setdefault(f, []).append((int(l), c.strip()))
	#for f in sorted(data):
	#    print(f)
	#    for l, c in sorted(data[f]):
	#        print("  %4d: %s" % (l, c))' -
	awk -F: '
{
  if ($1 != prev) print $1;
  prev = $1; $1 = "";
  ln = $2; $2 = "";
  gsub(/^[[:space:]]*/, "");
  printf("  %4d: %s\n", ln, $0);
}'
}

file_prefix() {
	sed 's/^/#\t/'
}

stdout_prefix() {
	sed 's/^/	/'
}

if [ "$msg_file" -a -e "$msg_file" ]; then
	exec >> "$msg_file"
	prefix=file_prefix
else
	prefix=stdout_prefix
fi

if [ "$commit_range" ]; then
	fixmes=$(git diff --name-only "$commit_range" | xargs git grep --cached -nF 'FIXME' -- || true)
else
	fixmes=$(git grep --cached -nF 'FIXME' | grep -vF 'git/.githooks/prepare-commit-msg' || true)
fi

if [ "$fixmes" ]; then
	echo "# existing FIXMEs:"
	echo "$fixmes"|group_grep|$prefix
	exit $on_error
fi

exit 0
# vim: set ts=4 sw=4 tw=0 noet :
